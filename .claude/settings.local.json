{
  "permissions": {
    "allow": [
      "Bash(*:*)",
      "File(*:*)",
      "Editor(*:*)",
      "Network(*:*)",
      "Bash(sls info:*)",
      "Bash(sed:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(sls deploy:*)",
      "Bash(sls remove:*)",
      "Bash(aws cloudformation list-stacks:*)",
      "Bash(aws dynamodb list-tables:*)",
      "Bash(aws route53 list-hosted-zones:*)",
      "Bash(aws acm list-certificates:*)",
      "Bash(aws acm describe-certificate:*)",
      "Bash(aws acm request-certificate:*)",
      "Bash(aws route53:*)",
      "Bash(aws ssm put-parameter:*)",
      "Bash(git checkout:*)",
      "Bash(aws apigatewayv2 create-domain-name:*)",
      "Bash(aws apigatewayv2 get-domain-name:*)",
      "Bash(aws apigatewayv2 get-api-mappings:*)",
      "Bash(aws apigatewayv2 update-api-mapping:*)",
      "Bash(aws apigatewayv2 get-stages:*)",
      "Bash(aws apigatewayv2 update-domain-name:*)",
      "Bash(nslookup:*)",
      "Bash(aws ssm get-parameter:*)",
      "Bash(aws:*)",
      "Bash(mv:*)",
      "Bash(ls:*)",
      "Bash(rm:*)",
      "Bash(git add:*)",
      "Bash(chmod:*)",
      "Bash(../scripts/deploy.sh:*)",
      "Bash(serverless remove:*)",
      "Bash(serverless deploy:*)",
      "Bash(npm install:*)",
      "Bash(for file in src/handlers/auth/*.js)",
      "Bash(do)",
      "Bash(if grep -q \"require(''aws-sdk'')\" \"$file\")",
      "Bash(then)",
      "Bash(echo \"Updating $file\")",
      "Bash(fi)",
      "Bash(done)",
      "Bash(./scripts/deploy.sh:*)",
      "Bash(mkdir:*)",
      "Bash(make:*)",
      "Bash(go:*)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/login cmd/handlers/auth/login/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/sources-create cmd/handlers/sources/create/main.go)",
      "Bash(curl:*)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/health cmd/handlers/system/health/main.go)",
      "Bash(AWS_PROFILE=listbackup.ai sls deploy --config serverless-auth-simple.yml --stage main)",
      "Bash(cp:*)",
      "Bash(zip:*)",
      "Bash(AWS_PROFILE=listbackup.ai sls deploy --config serverless-go-test.yml --stage main)",
      "Bash(unzip:*)",
      "Bash(AWS_PROFILE=listbackup.ai sls deploy --config serverless-auth-working.yml --stage main)",
      "Bash(AWS_PROFILE=listbackup.ai sls deploy --config serverless-sources-working.yml --stage main)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/sources-update cmd/handlers/sources/update/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/sources-delete cmd/handlers/sources/delete/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/sources-sync cmd/handlers/sources/sync/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/sources-test cmd/handlers/sources/test/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/register cmd/handlers/auth/register/main.go)",
      "Bash(AWS_PROFILE=listbackup.ai sls deploy --config serverless-sources-complete.yml --stage main)",
      "Bash(AWS_PROFILE=listbackup.ai sls deploy function --function createSource --config serverless-sources-working.yml --stage main)",
      "Bash(rg:*)",
      "Bash(./build-all.sh:*)",
      "Bash(# Test Account endpoints\necho \"=== Testing GET account ===\"\ncurl -X GET https://api.listbackup.ai/v2/account \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  --silent | jq .\n\necho -e \"\\n=== Testing PUT account update ===\"\ncurl -X PUT https://api.listbackup.ai/v2/account \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -d '{\"name\": \"Updated Account Name\", \"settings\": {\"maxSources\": 5}}' \\\n  --silent | jq .)",
      "Bash(# Test Jobs endpoints  \necho \"=== Testing GET jobs ===\"\ncurl -X GET https://api.listbackup.ai/v2/jobs \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  --silent | jq .\n\necho -e \"\\n=== Testing POST create job ===\"\ncurl -X POST https://api.listbackup.ai/v2/jobs \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -d '{\"name\": \"Test Backup Job\", \"sourceIds\": [\"source:123\"], \"schedule\": \"daily\"}' \\\n  --silent | jq .)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/account-get cmd/handlers/account/get/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/account-update cmd/handlers/account/update/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/jobs-get cmd/handlers/jobs/get/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/jobs-create cmd/handlers/jobs/create/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/activity-get cmd/handlers/activity/get/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/data-list cmd/handlers/data/list/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/data-download cmd/handlers/data/download/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/health cmd/handlers/health/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/auth-login cmd/handlers/auth/login/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/auth-register cmd/handlers/auth/register/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/auth-logout cmd/handlers/auth/logout/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/auth-refresh cmd/handlers/auth/refresh/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/auth-profile cmd/handlers/auth/profile/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/integrations-oauth-start cmd/handlers/integrations/oauth-start/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/integrations-oauth-callback cmd/handlers/integrations/oauth-callback/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/auth-profile cmd/handlers/auth/get-profile/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -o bootstrap main.go)",
      "Bash(--table-name \"listbackup-main-user-accounts\" )",
      "Bash(--attribute-definitions )",
      "Bash(AttributeName=userId,AttributeType=S )",
      "Bash(AttributeName=accountId,AttributeType=S )",
      "Bash(--key-schema )",
      "Bash(AttributeName=userId,KeyType=HASH )",
      "Bash(AttributeName=accountId,KeyType=RANGE )",
      "Bash(--billing-mode PAY_PER_REQUEST )",
      "Bash(--profile listbackup.ai )",
      "Bash(--region us-east-1)",
      "Bash(--table-name \"listbackup-main-users\" )",
      "Bash(--item '{\n    \"\"userId\"\": {\"\"S\"\": \"\"user:test-123\"\"},\n    \"\"cognitoUserId\"\": {\"\"S\"\": \"\"test-123\"\"},\n    \"\"email\"\": {\"\"S\"\": \"\"test@listbackup.ai\"\"},\n    \"\"name\"\": {\"\"S\"\": \"\"Test User\"\"},\n    \"\"status\"\": {\"\"S\"\": \"\"active\"\"},\n    \"\"createdAt\"\": {\"\"S\"\": \"\"2025-06-15T04:00:00Z\"\"},\n    \"\"updatedAt\"\": {\"\"S\"\": \"\"2025-06-15T04:00:00Z\"\"},\n    \"\"preferences\"\": {\n      \"\"M\"\": {\n        \"\"timezone\"\": {\"\"S\"\": \"\"UTC\"\"},\n        \"\"theme\"\": {\"\"S\"\": \"\"auto\"\"},\n        \"\"notifications\"\": {\n          \"\"M\"\": {\n            \"\"email\"\": {\"\"BOOL\"\": true},\n            \"\"slack\"\": {\"\"BOOL\"\": false},\n            \"\"backupComplete\"\": {\"\"BOOL\"\": true},\n            \"\"backupFailed\"\": {\"\"BOOL\"\": true},\n            \"\"weeklyReport\"\": {\"\"BOOL\"\": true}\n          }\n        }\n      }\n    }\n  }' )",
      "Bash(--profile listbackup.ai )",
      "Bash(--table-name \"listbackup-main-accounts\" )",
      "Bash(--item '{\n    \"\"accountId\"\": {\"\"S\"\": \"\"account:test-123\"\"},\n    \"\"parentAccountId\"\": {\"\"NULL\"\": true},\n    \"\"ownerUserId\"\": {\"\"S\"\": \"\"user:test-123\"\"},\n    \"\"name\"\": {\"\"S\"\": \"\"Test User Account\"\"},\n    \"\"company\"\": {\"\"S\"\": \"\"Test Company\"\"},\n    \"\"accountPath\"\": {\"\"S\"\": \"\"/test-123\"\"},\n    \"\"level\"\": {\"\"N\"\": \"\"0\"\"},\n    \"\"plan\"\": {\"\"S\"\": \"\"free\"\"},\n    \"\"status\"\": {\"\"S\"\": \"\"active\"\"},\n    \"\"billingEmail\"\": {\"\"S\"\": \"\"test@listbackup.ai\"\"},\n    \"\"createdAt\"\": {\"\"S\"\": \"\"2025-06-15T04:00:00Z\"\"},\n    \"\"updatedAt\"\": {\"\"S\"\": \"\"2025-06-15T04:00:00Z\"\"},\n    \"\"settings\"\": {\n      \"\"M\"\": {\n        \"\"maxSources\"\": {\"\"N\"\": \"\"10\"\"},\n        \"\"maxStorageGB\"\": {\"\"N\"\": \"\"5\"\"},\n        \"\"maxBackupJobs\"\": {\"\"N\"\": \"\"5\"\"},\n        \"\"retentionDays\"\": {\"\"N\"\": \"\"30\"\"},\n        \"\"encryptionEnabled\"\": {\"\"BOOL\"\": true},\n        \"\"twoFactorRequired\"\": {\"\"BOOL\"\": false},\n        \"\"allowSubAccounts\"\": {\"\"BOOL\"\": true},\n        \"\"maxSubAccounts\"\": {\"\"N\"\": \"\"5\"\"},\n        \"\"whiteLabel\"\": {\n          \"\"M\"\": {\n            \"\"enabled\"\": {\"\"BOOL\"\": false},\n            \"\"logo\"\": {\"\"S\"\": \"\"\"\"},\n            \"\"brandName\"\": {\"\"S\"\": \"\"\"\"}\n          }\n        }\n      }\n    },\n    \"\"usage\"\": {\n      \"\"M\"\": {\n        \"\"sources\"\": {\"\"N\"\": \"\"0\"\"},\n        \"\"storageUsedGB\"\": {\"\"N\"\": \"\"0\"\"},\n        \"\"backupJobs\"\": {\"\"N\"\": \"\"0\"\"},\n        \"\"monthlyBackups\"\": {\"\"N\"\": \"\"0\"\"},\n        \"\"monthlyAPIRequests\"\": {\"\"N\"\": \"\"0\"\"}\n      }\n    }\n  }' )",
      "Bash(--profile listbackup.ai )",
      "Bash(--table-name \"listbackup-main-user-accounts\" )",
      "Bash(--item '{\n    \"\"userId\"\": {\"\"S\"\": \"\"user:test-123\"\"},\n    \"\"accountId\"\": {\"\"S\"\": \"\"account:test-123\"\"},\n    \"\"role\"\": {\"\"S\"\": \"\"Owner\"\"},\n    \"\"status\"\": {\"\"S\"\": \"\"Active\"\"},\n    \"\"permissions\"\": {\n      \"\"M\"\": {\n        \"\"canCreateSubAccounts\"\": {\"\"BOOL\"\": true},\n        \"\"canInviteUsers\"\": {\"\"BOOL\"\": true},\n        \"\"canManageIntegrations\"\": {\"\"BOOL\"\": true},\n        \"\"canViewAllData\"\": {\"\"BOOL\"\": true},\n        \"\"canManageBilling\"\": {\"\"BOOL\"\": true},\n        \"\"canDeleteAccount\"\": {\"\"BOOL\"\": true},\n        \"\"canModifySettings\"\": {\"\"BOOL\"\": true}\n      }\n    },\n    \"\"linkedAt\"\": {\"\"S\"\": \"\"2025-06-15T04:00:00Z\"\"},\n    \"\"updatedAt\"\": {\"\"S\"\": \"\"2025-06-15T04:00:00Z\"\"}\n  }' )",
      "Bash(--profile listbackup.ai )",
      "Bash(export USER_ACCOUNTS_TABLE=\"listbackup-main-user-accounts\")",
      "Bash(export USERS_TABLE=\"listbackup-main-users\")",
      "Bash(export ACCOUNTS_TABLE=\"listbackup-main-accounts\")",
      "Bash(GOOS=linux GOARCH=amd64 go build -o bin/crud-test ./cmd/handlers/test/crud-test/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -o bin/bootstrap ./cmd/handlers/test/crud-test/main.go)",
      "Bash(GOARCH=amd64 GOOS=linux go build -tags lambda.norpc -o bin/sources-create cmd/handlers/sources/create/main.go)",
      "Bash(GOARCH=amd64 GOOS=linux go build -tags lambda.norpc -o bin/register cmd/handlers/auth/register/main.go)",
      "Bash(GOARCH=amd64 GOOS=linux go build -tags lambda.norpc -o bin/sources-get cmd/handlers/sources/get/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/get-profile cmd/handlers/auth/get-profile/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/get-user-accounts cmd/handlers/users/get-user-accounts/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/update-profile cmd/handlers/users/update-profile/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/get-settings cmd/handlers/users/get-settings/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/update-settings cmd/handlers/users/update-settings/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=\"-s -w\" -o cmd/handlers/accounts/list/bootstrap cmd/handlers/accounts/list/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=\"-s -w\" -o cmd/handlers/accounts/create/bootstrap cmd/handlers/accounts/create/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=\"-s -w\" -o cmd/handlers/accounts/update/bootstrap cmd/handlers/accounts/update/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=\"-s -w\" -o cmd/handlers/accounts/delete/bootstrap cmd/handlers/accounts/delete/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=\"-s -w\" -o cmd/handlers/sources/list/bootstrap cmd/handlers/sources/list/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=\"-s -w\" -o cmd/handlers/sources/get/bootstrap cmd/handlers/sources/get/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=\"-s -w\" -o cmd/handlers/sources/create/bootstrap cmd/handlers/sources/create/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=\"-s -w\" -o cmd/handlers/sources/update/bootstrap cmd/handlers/sources/update/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=\"-s -w\" -o cmd/handlers/sources/delete/bootstrap cmd/handlers/sources/delete/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=\"-s -w\" -o cmd/handlers/sources/sync/bootstrap cmd/handlers/sources/sync/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=\"-s -w\" -o cmd/handlers/sources/test/bootstrap cmd/handlers/sources/test/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o bin/status cmd/handlers/status/main.go)",
      "Bash(GOOS=linux GOARCH=amd64 go build -o bin/get-user-accounts ./cmd/handlers/users/get-user-accounts)",
      "Bash(GOOS=linux GOARCH=amd64 go build -o bin/update-profile ./cmd/handlers/users/update-profile)",
      "Bash(GOOS=linux GOARCH=amd64 go build -o bin/get-settings ./cmd/handlers/users/get-settings)",
      "Bash(GOOS=linux GOARCH=amd64 go build -o bin/update-settings ./cmd/handlers/users/update-settings)",
      "Bash(for handler in get list create update delete)",
      "Bash(echo:*)",
      "Bash(GOOS=linux GOARCH=amd64 go build -o bin/accounts-$handler ./cmd/handlers/accounts/$handler)",
      "Bash(if [ $? -eq 0 ])",
      "Bash(for handler in list get create update delete sync test)",
      "Bash(GOOS=linux GOARCH=amd64 go build -o bin/sources-$handler ./cmd/handlers/sources/$handler)",
      "Bash(else)",
      "Bash(for handler in sync test)",
      "Bash(# Build jobs handlers\necho \"Building jobs handlers...\"\nfor handler in create get; do\n  echo \"  Building jobs/$handler...\"\n  GOOS=linux GOARCH=amd64 go build -o bin/jobs-$handler ./cmd/handlers/jobs/$handler\n  if [ $? -eq 0 ]; then\n    cp bin/jobs-$handler bootstrap\n    zip cmd/handlers/jobs/$handler/$handler.zip bootstrap\n    rm bootstrap\n  fi\ndone\n\n# Build integrations handlers\necho -e \"\\nBuilding integrations handlers...\"\nfor handler in oauth-start oauth-callback; do\n  echo \"  Building integrations/$handler...\"\n  GOOS=linux GOARCH=amd64 go build -o bin/$handler ./cmd/handlers/integrations/$handler\n  if [ $? -eq 0 ]; then\n    cp bin/$handler bootstrap\n    zip bin/$handler.zip bootstrap\n    rm bootstrap\n  fi\ndone\n\n# Build account handlers\necho -e \"\\nBuilding account handlers...\"\nfor handler in get update create-sub-account list-hierarchy switch-context; do\n  echo \"  Building account/$handler...\"\n  if [ \"$handler\" = \"update\" ]; then\n    GOOS=linux GOARCH=amd64 go build -o bin/account-$handler ./cmd/handlers/account/{update}\n  else\n    GOOS=linux GOARCH=amd64 go build -o bin/account-$handler ./cmd/handlers/account/$handler\n  fi\n  if [ $? -eq 0 ]; then\n    cp bin/account-$handler bootstrap\n    zip bin/$handler.zip bootstrap\n    rm bootstrap\n  fi\ndone)",
      "Bash(# Build account handlers\necho \"Building account handlers...\"\nfor handler in get update create-sub-account list-hierarchy switch-context; do\n  echo \"  Building account/$handler...\"\n  GOOS=linux GOARCH=amd64 go build -o bin/account-$handler ./cmd/handlers/account/$handler\n  if [ $? -eq 0 ]; then\n    cp bin/account-$handler bootstrap\n    zip bin/$handler.zip bootstrap\n    rm bootstrap\n    echo \"    ✓ Built successfully\"\n  else\n    echo \"    ✗ Build failed\"\n  fi\ndone)",
      "Bash(GOOS=linux GOARCH=amd64 go build -o bin/account-update ./cmd/handlers/account/update)",
      "Bash(GOOS=linux GOARCH=amd64 go build -o bin/sources-create ./cmd/handlers/sources/create)",
      "Bash(GOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\" -o bin/sources-list cmd/handlers/sources/list/main.go)",
      "WebFetch(domain:developer.infusionsoft.com)",
      "Bash(PLATFORMS_TABLE=listbackup-main-platforms PLATFORM_SOURCES_TABLE=listbackup-main-platform-sources ./bin/setup-keap-platform)",
      "Bash(__NEW_LINE__ rm -f bin/*.zip)",
      "Bash(__NEW_LINE__ cp bin/platforms-list bin/bootstrap)",
      "Bash(__NEW_LINE__ cp bin/platforms-get bin/bootstrap)",
      "Bash(__NEW_LINE__ cp bin/platform-sources-list bin/bootstrap)",
      "Bash(__NEW_LINE__ cp bin/platform-sources-get bin/bootstrap)",
      "Bash(__NEW_LINE__ cp bin/platform-connections-list bin/bootstrap)",
      "Bash(__NEW_LINE__ cp bin/platform-connections-create bin/bootstrap)",
      "Bash(__NEW_LINE__ echo \"All packages recreated with bootstrap naming\")",
      "Bash(export GOOS=linux)",
      "Bash(export GOARCH=amd64)",
      "Bash(export CGO_ENABLED=0)",
      "Bash(__NEW_LINE__ go build -o bin/connections-list cmd/handlers/connections/list/main.go)",
      "Bash(__NEW_LINE__ echo \"All connections service binaries rebuilt successfully\")",
      "Bash(npm run build:*)",
      "mcp__teamwork__teamwork_claude_developer_guide"
    ],
    "deny": []
  }
}