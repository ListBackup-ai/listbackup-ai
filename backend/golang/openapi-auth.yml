openapi: 3.0.3
info:
  title: "ListBackup Authentication API"
  description: "Complete authentication service for ListBackup.ai platform with JWT-based auth, user management, and hierarchical account system"
  version: "1.0.0"
  contact:
    name: "ListBackup.ai Support"
    email: "support@listbackup.ai"
    url: "https://listbackup.ai"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"

servers:
  - url: "https://res2d7ardc.execute-api.us-west-2.amazonaws.com"
    description: "Production API Gateway"

tags:
  - name: "Authentication"
    description: "User authentication and session management"
  - name: "User Management" 
    description: "User profile and account operations"
  - name: "Account Management"
    description: "Hierarchical account system operations"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Bearer token obtained from login endpoint"

  schemas:
    RegisterRequest:
      type: object
      required: ["email", "password", "name"]
      properties:
        email:
          type: string
          format: email
          description: "User's email address (must be unique)"
          example: "user@company.com"
        password:
          type: string
          minLength: 6
          description: "User's password (minimum 6 characters)"
          example: "SecurePassword123!"
        name:
          type: string
          description: "User's full name"
          example: "John Doe"
        company:
          type: string
          description: "Optional company name"
          example: "Acme Corporation"

    LoginRequest:
      type: object
      required: ["email", "password"]
      properties:
        email:
          type: string
          format: email
          description: "User's email address"
          example: "user@company.com"
        password:
          type: string
          description: "User's password"
          example: "SecurePassword123!"

    RefreshRequest:
      type: object
      required: ["refreshToken"]
      properties:
        refreshToken:
          type: string
          description: "Valid refresh token from login response"
          example: "eyJjdHkiOiJKV1QiLCJlbmMi..."

    LogoutRequest:
      type: object
      required: ["accessToken"]
      properties:
        accessToken:
          type: string
          description: "Valid access token to invalidate"
          example: "eyJraWQiOiJyVXBLS1VMN3Nk..."

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
        data:
          type: object
          description: "Response data (varies by endpoint)"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Error message describing what went wrong"
        message:
          type: string
          example: ""

paths:
  /auth/register:
    post:
      tags: ["Authentication"]
      summary: "Register new user"
      description: "Create a new user account with automatic root account setup. Creates Cognito user, stores user data, creates root account, and establishes user-account relationship."
      requestBody:
        description: "User registration details"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
            example:
              email: "user@company.com"
              password: "SecurePassword123!"
              name: "John Doe"
              company: "Acme Corporation"
      responses:
        '201':
          description: "User registered successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                success: true
                message: "User registered successfully"
                data:
                  userId: "18f1f3e0-7071-70a9-fee7-23bc52bb47ce"
                  accountId: "bec1760e-999a-4452-9bd6-f01f4bd52da0"
                  email: "user@company.com"
                  name: "John Doe"
                  company: "Acme Corporation"
                  userStatus: "FORCE_CHANGE_PASSWORD"
        '400':
          description: "Validation error or user already exists"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                missing_email:
                  summary: "Missing email field"
                  value:
                    success: false
                    error: "Email is required"
                    message: ""
                invalid_email:
                  summary: "Invalid email format"
                  value:
                    success: false
                    error: "Invalid email format"
                    message: ""
                weak_password:
                  summary: "Password too short"
                  value:
                    success: false
                    error: "Password must be at least 6 characters long"
                    message: ""
                user_exists:
                  summary: "User already exists"
                  value:
                    success: false
                    error: "User already exists"
                    message: ""
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                error: "Registration failed"
                message: ""

  /auth/login:
    post:
      tags: ["Authentication"]
      summary: "User login"
      description: "Authenticate user credentials and return JWT tokens. Returns access token for API calls, ID token with user info, and refresh token for token renewal."
      requestBody:
        description: "User login credentials"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            example:
              email: "user@company.com"
              password: "SecurePassword123!"
      responses:
        '200':
          description: "Login successful - returns JWT tokens"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                success: true
                message: "Login successful"
                data:
                  accessToken: "eyJraWQiOiJyVXBLS1VMN3NkSXlsRjdxQUFOb2g0WGFaY2ZUbDJ1WDMrb0h1OTlXZ0FJPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIxOGYxZjNlMC03MDcxLTcwYTktZmVlNy0yM2JjNTJiYjQ3Y2UiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtd2VzdC0yLmFtYXpvbmF3cy5jb21cL3VzLXdlc3QtMl9HUngzajl4OFEiLCJjbGllbnRfaWQiOiI3YWM2aGNmaGY3cGJiamZtaXJjYmhhMDU1MyIsIm9yaWdpbl9qdGkiOiI3N2FiMTgwZC03ZTc0LTRkOWMtYTkwZC03NjExZjcxMzJhYjYiLCJldmVudF9pZCI6IjQ4NzJmMWE2LWQ3NGEtNDM3Yy05NjFmLTg4ZTU1OGI2MmU1NiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3NTAzNTM2MDIsImV4cCI6MTc1MDM1NzIwMiwiaWF0IjoxNzUwMzUzNjAyLCJqdGkiOiIyNWI2NjQ2My0zZTBiLTRkMjMtYWVlMi02NWU2NDZmMjc0N2QiLCJ1c2VybmFtZSI6InVzZXJfMTc1MDM1MzU4MF83ODg3In0"
                  idToken: "eyJraWQiOiJqWWVVWlZLTk1oYVBlSjNcLysrRkF0VGJjeVZoVkM1ODhxXC8xSmJOeXdseUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIxOGYxZjNlMC03MDcxLTcwYTktZmVlNy0yM2JjNTJiYjQ3Y2UiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tXC91cy13ZXN0LTJfR1J4M2o5eDhRIiwiY29nbml0bzp1c2VybmFtZSI6InVzZXJfMTc1MDM1MzU4MF83ODg3IiwiY3VzdG9tOmNvbXBhbnkiOiJXb3JraW5nIFRlc3QgQ29tcGFueSIsIm9yaWdpbl9qdGkiOiI3N2FiMTgwZC03ZTc0LTRkOWMtYTkwZC03NjExZjcxMzJhYjYiLCJhdWQiOiI3YWM2aGNmaGY3cGJiamZtaXJjYmhhMDU1MyIsImV2ZW50X2lkIjoiNDg3MmYxYTYtZDc0YS00MzdjLTk2MWYtODhlNTU4YjYyZTU2IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE3NTAzNTM2MDIsIm5hbWUiOiJXb3JraW5nIFRlc3QgVXNlciIsImV4cCI6MTc1MDM1NzIwMiwiaWF0IjoxNzUwMzUzNjAyLCJqdGkiOiI4MWNhNTJhMi00MjUzLTRhNjAtYWY2Yi1lYzdiMDU5YzI2MDIiLCJlbWFpbCI6InRlc3Qrd29ya2luZzEyM0BsaXN0YmFja3VwLmFpIn0"
                  refreshToken: "eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.d45JMkjHC_weOPaWOB6gTYT2xascwI5MV1LOrkBHHD7nhqgM6MyXqRq8o42G71lGFehNUEOPqkL09trSVolhiRtOWJr6ja1lrlaGgecdCS5_jHu2Gb706m99vNu036Kh4brt3sZuggxgs-3RcOP-kkxhIwHA_WJWPjFG1JevIcvXqJvTqaWx5wNDmyUOIJWpwxChtYwSrw9fPQUjCX_fijLOohNV9BThvegwcErFludC3p7NqkH7s5TWsfQNbq5G_VpFs6qvhrjPIKTyudcOy8KTBJj_T4s8J5WWekeT0pCPl4csR_w0lNEEnTEaUZGy1SCCSbLgpwN2yn8WegJaIA"
                  expiresIn: 3600
                  tokenType: "Bearer"
        '400':
          description: "Validation error (missing email/password, invalid JSON)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                missing_email:
                  summary: "Missing email field"
                  value:
                    success: false
                    error: "Email is required"
                    message: ""
                missing_password:
                  summary: "Missing password field"
                  value:
                    success: false
                    error: "Password is required"
                    message: ""
                invalid_json:
                  summary: "Invalid JSON format"
                  value:
                    success: false
                    error: "Invalid JSON format"
                    message: ""
        '401':
          description: "Authentication failed (invalid credentials, user not found)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid_credentials:
                  summary: "Wrong email or password"
                  value:
                    success: false
                    error: "Invalid email or password"
                    message: ""
                user_not_found:
                  summary: "User does not exist"
                  value:
                    success: false
                    error: "User not found"
                    message: ""
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                error: "Login failed"
                message: ""

  /auth/status:
    get:
      tags: ["Authentication"]
      summary: "Check authentication status"
      description: "Validate JWT token and return authentication status with user information and debug details. Requires valid Bearer token in Authorization header."
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Authentication status retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                success: true
                message: "Authentication status retrieved successfully"
                data:
                  authenticated: true
                  userId: "user:18f1f3e0-7071-70a9-fee7-23bc52bb47ce"
                  accountId: ""
                  timestamp: "2025-06-19T00:00:00Z"
                  version: "v2"
                  service: "go-auth"
                  message: "Authentication validation successful"
                  debug:
                    authorizerType: "Lambda"
                    hasUserId: true
                    hasAccountId: false
        '401':
          description: "Unauthorized - invalid or missing JWT token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                error: "Unauthorized"
                message: ""

  /auth/refresh:
    post:
      tags: ["Authentication"]
      summary: "Refresh access token"
      description: "Use a valid refresh token to obtain new JWT access and ID tokens. No authentication required - uses refresh token for verification."
      requestBody:
        description: "Refresh token request"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshRequest"
            example:
              refreshToken: "eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ..."
      responses:
        '200':
          description: "Token refreshed successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                success: true
                message: "Token refreshed successfully"
                data:
                  accessToken: "eyJraWQiOiJyVXBLS1VMN3NkSXlsRjdxQUFOb2g0WGFaY2ZUbDJ1WDMrb0h1OTlXZ0FJPSIsImFsZyI6IlJTMjU2In0..."
                  idToken: "eyJraWQiOiJqWWVVWlZLTk1oYVBlSjNcLysrRkF0VGJjeVZoVkM1ODhxXC8xSmJOeXdseUk9IiwiYWxnIjoiUlMyNTYifQ..."
                  expiresIn: 3600
                  tokenType: "Bearer"
        '400':
          description: "Validation error or invalid refresh token format"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                error: "Refresh token is required"
                message: ""
        '401':
          description: "Invalid or expired refresh token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid_token:
                  summary: "Invalid refresh token"
                  value:
                    success: false
                    error: "Invalid refresh token"
                    message: ""
                expired_token:
                  summary: "Expired refresh token"
                  value:
                    success: false
                    error: "Refresh token expired"
                    message: ""
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                error: "Token refresh failed"
                message: ""

  /auth/logout:
    post:
      tags: ["Authentication"]
      summary: "User logout"
      description: "Invalidate user session by performing global logout in Cognito. Requires access token to identify the session to terminate."
      requestBody:
        description: "Logout request with access token"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogoutRequest"
            example:
              accessToken: "eyJraWQiOiJyVXBLS1VMN3Nk..."
      responses:
        '200':
          description: "Logout successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                success: true
                message: "Logout successful"
                data:
                  message: "User logged out successfully"
        '400':
          description: "Validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                error: "Access token is required"
                message: ""
        '401':
          description: "Invalid or expired access token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid_token:
                  summary: "Invalid access token"
                  value:
                    success: false
                    error: "Invalid access token"
                    message: ""
                expired_token:
                  summary: "Access token expired"
                  value:
                    success: false
                    error: "Access token expired"
                    message: ""
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                error: "Logout failed"
                message: ""

  /auth/profile:
    get:
      tags: ["User Management"]
      summary: "Get user profile"
      description: "Retrieve detailed user profile information including current account details and user metadata. Requires valid JWT authentication."
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "User profile retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                success: true
                message: "Profile retrieved successfully"
                data:
                  userId: "18f1f3e0-7071-70a9-fee7-23bc52bb47ce"
                  email: "user@company.com"
                  name: "John Doe"
                  status: "active"
                  currentAccountId: "bec1760e-999a-4452-9bd6-f01f4bd52da0"
                  currentAccount:
                    accountId: "bec1760e-999a-4452-9bd6-f01f4bd52da0"
                    accountName: "Acme Corporation"
                    company: "Acme Corporation"
                    plan: "free"
                    status: "active"
        '401':
          description: "Unauthorized - invalid or missing JWT token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                error: "Unauthorized"
                message: ""
        '404':
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                error: "User not found"
                message: ""
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                error: "Failed to get profile"
                message: ""

  /auth/accounts:
    get:
      tags: ["Account Management"]
      summary: "Get available accounts"
      description: "Retrieve list of all accounts the authenticated user has access to, including role information and account hierarchy details."
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Available accounts retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                success: true
                message: "Available accounts retrieved successfully"
                data:
                  availableAccounts:
                    - accountId: "bec1760e-999a-4452-9bd6-f01f4bd52da0"
                      name: "Acme Corporation"
                      company: "Acme Corporation"
                      role: "Owner"
                      status: "Active"
                      level: 0
                      plan: "free"
                      isRootAccount: true
                      isCurrent: true
                  currentAccount: "bec1760e-999a-4452-9bd6-f01f4bd52da0"
                  total: 1
        '401':
          description: "Unauthorized - invalid or missing JWT token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                error: "Unauthorized"
                message: ""
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                error: "Failed to retrieve accounts"
                message: ""