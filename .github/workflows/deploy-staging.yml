name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  STAGE: staging

jobs:
  deploy-backend:
    name: Deploy Backend Services
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install Serverless Framework
      run: npm install -g serverless@3
    
    - name: Deploy Infrastructure
      working-directory: backend/golang/services/infrastructure
      run: |
        npm install
        serverless deploy --stage ${{ env.STAGE }}
    
    - name: Deploy Core Services
      working-directory: backend/golang/services/core
      run: |
        npm install
        serverless deploy --stage ${{ env.STAGE }}
    
    - name: Deploy API Gateway
      working-directory: backend/golang/services/api/gateway
      run: |
        npm install
        serverless deploy --stage ${{ env.STAGE }}
    
    - name: Deploy Auth Service
      working-directory: backend/golang/services/api/auth
      run: |
        npm install
        serverless deploy --stage ${{ env.STAGE }}
    
    - name: Deploy Other Services
      run: |
        # Deploy remaining services
        for service in accounts users platforms; do
          cd backend/golang/services/api/$service
          npm install
          serverless deploy --stage ${{ env.STAGE }}
          cd -
        done

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: platforms/web/package-lock.json
    
    - name: Install dependencies
      working-directory: platforms/web
      run: npm ci
    
    - name: Build application
      working-directory: platforms/web
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}
        NEXT_PUBLIC_AUTH_API_URL: ${{ secrets.STAGING_AUTH_API_URL }}
        NEXT_PUBLIC_API_STAGE: staging
      run: npm run build
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to S3
      working-directory: platforms/web
      run: |
        aws s3 sync out/ s3://${{ secrets.STAGING_S3_BUCKET }} --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_CF_DISTRIBUTION_ID }} --paths "/*"